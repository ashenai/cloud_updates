name: Deploy to IONOS VPS

on:

  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production

env:
  PYTHON_VERSION: '3.10'
  APP_URL: 'https://shen-ai.cloud/cloud_updates'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov
          
      - name: Run tests with coverage
        id: tests
        run: |
          pytest --cov=app --cov-report=xml
          echo "coverage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")" >> $GITHUB_OUTPUT
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

      - name: Notify Discord on Test Success
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "✅ Tests Passed"
          description: |
            All tests passed successfully!
            
            **Coverage:** ${{ steps.tests.outputs.coverage }}%
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            
            [View Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          color: 0x2ECC71
          username: GitHub Actions
          avatar_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png

      - name: Notify Discord on Test Failure
        if: failure()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "❌ Tests Failed"
          description: |
            Tests failed to pass!
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Actor:** ${{ github.actor }}
            
            [View Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          color: 0xE74C3C
          username: GitHub Actions
          avatar_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: production
      url: ${{ env.APP_URL }}
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Generate version tag
        id: version
        run: echo "version=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to IONOS VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.IONOS_HOST }}
          username: ${{ secrets.IONOS_USERNAME }}
          password: ${{ secrets.IONOS_PASSWORD }}
          script_stop: true
          command_timeout: "10m"
          envs: GITHUB_REPOSITORY
          script: |
            # Create backup directory if it doesn't exist
            sudo mkdir -p /var/www/vhosts/shen-ai.cloud/backups
            sudo mkdir -p /var/www/vhosts/shen-ai.cloud/logs
            
            # Create uwsgi apps directory if it doesn't exist
            sudo mkdir -p /etc/uwsgi/apps-available /etc/uwsgi/apps-enabled
            
            # Backup current version if exists
            if [ -d "/var/www/vhosts/shen-ai.cloud/cloud_updates" ]; then
              sudo tar -czf "/var/www/vhosts/shen-ai.cloud/backups/backup_$(date +%Y%m%d_%H%M%S).tar.gz" -C /var/www/vhosts/shen-ai.cloud cloud_updates
            fi
            
            # Clone or update repository
            cd /var/www/vhosts/shen-ai.cloud
            if [ -d "cloud_updates" ]; then
              cd cloud_updates
              sudo git fetch --all
              sudo git reset --hard origin/main
            else
              sudo git clone https://github.com/$GITHUB_REPOSITORY cloud_updates
              cd cloud_updates
            fi
            
            # Set up virtual environment
            sudo python3 -m venv /var/www/vhosts/shen-ai.cloud/venv
            source /var/www/vhosts/shen-ai.cloud/venv/bin/activate
            sudo pip install --no-cache-dir -r requirements.txt uwsgi
            
            # Initialize database if needed
            if [ ! -f "instance/cloud_updates.db" ]; then
              flask db upgrade
            fi
            
            # Copy configurations
            sudo cp config.py.example config.py
            sudo sed -i "s/DEBUG = True/DEBUG = False/" config.py
            
            # Set up uwsgi configuration
            sudo cp uwsgi.ini /etc/uwsgi/apps-available/cloud_updates.ini
            sudo ln -sf /etc/uwsgi/apps-available/cloud_updates.ini /etc/uwsgi/apps-enabled/
            
            # Set up systemd service
            sudo cp apache/cloud_updates.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable cloud_updates
            
            # Set up nginx configuration
            sudo cp nginx/cloud_updates.conf /etc/nginx/conf.d/
            
            # Set correct permissions
            sudo chown -R psaserv:psacln /var/www/vhosts/shen-ai.cloud/cloud_updates /var/www/vhosts/shen-ai.cloud/venv /var/www/vhosts/shen-ai.cloud/logs
            sudo chmod -R 750 /var/www/vhosts/shen-ai.cloud/cloud_updates /var/www/vhosts/shen-ai.cloud/venv
            sudo chmod -R 770 /var/www/vhosts/shen-ai.cloud/logs
            
            # Create and set permissions for uwsgi socket directory
            sudo mkdir -p /tmp/cloud_updates
            sudo chown psaserv:psacln /tmp/cloud_updates
            sudo chmod 750 /tmp/cloud_updates
            
            # Restart services
            sudo systemctl restart cloud_updates
            sudo plesk bin nginx --reconfigure-domain shen-ai.cloud
            sudo plesk bin nginx -r

      - name: Health Check
        uses: jtalk/url-health-check-action@v3
        with:
          url: ${{ env.APP_URL }}/health
          max-attempts: 5
          retry-delay: 15s
          follow-redirect: true

      - name: Notify Discord on Success
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "✅ Deployment Successful"
          description: |
            Successfully deployed Cloud Updates to production
            
            **Version:** ${{ steps.version.outputs.version }}
            **Environment:** ${{ github.event.inputs.environment || 'production' }}
            **Deployed By:** ${{ github.actor }}
            **Commit:** ${{ github.sha }}
            
            [View Application](${{ env.APP_URL }}) | [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          color: 0x2ECC71
          username: GitHub Actions
          avatar_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png

      - name: Notify Discord on Failure
        if: failure()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "❌ Deployment Failed"
          description: |
            Failed to deploy Cloud Updates to production
            
            **Version:** ${{ steps.version.outputs.version }}
            **Environment:** ${{ github.event.inputs.environment || 'production' }}
            **Deployed By:** ${{ github.actor }}
            **Commit:** ${{ github.sha }}
            
            [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          color: 0xE74C3C
          username: GitHub Actions
          avatar_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png